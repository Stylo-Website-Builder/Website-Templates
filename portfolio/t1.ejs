<!DOCTYPE html>
<html lang="en" style="scroll-behavior: smooth;">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= websiteName %></title>
    <link rel="icon" type="image/png" href="https://res.cloudinary.com/dn5occ53n/image/upload/v1738491116/transparent-favicon_dsgzwb.png">
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="font-sans bg-gray-50">
    <header class="fixed w-full z-30 bg-white/80 backdrop-blur-md shadow-sm">
        <div class="max-w-7xl mx-auto px-3 sm:px-8 py-4">
            <div class="flex justify-between items-center">
                <% if (header.logoType === "text") { %>
                    <h1 class="text-2xl font-bold text-gray-800 py-2"><%= header.logoText %></h1>
                <% } else { %>
                    <div class="relative">
                        <img src="<%= header.logoImage %>" alt="Logo" class="h-[48px]">
                    </div>
                <% } %>
                <nav class="hidden md:flex">
                    <ul class="flex gap-8">
                        <% header.items.forEach(item => { %>
                        <li>
                            <a href="<%= item.href %>" class="text-gray-600 hover:text-rose-500 transition-colors cursor-pointer">
                                <%= item.text %>
                            </a>
                        </li>
                        <% }) %>
                    </ul>
                </nav>
                <div class="text-rose-500 font-medium"><%= header.phone %></div>
            </div>
        </div>
    </header>

    <section class="pt-32 pb-20">
        <div class="max-w-7xl mx-auto px-3 sm:px-8">
            <div class="bg-white rounded-3xl shadow-[inset_0_2px_4px_rgba(0,0,0,0.1)] p-8 sm:p-16">
                <div class="grid md:grid-cols-2 gap-16 items-center">
                    <div class="space-y-8">
                        <h1 class="text-6xl font-bold text-gray-800"><%= hero.greeting %></h1>
                        <p class="text-xl text-gray-600"><%= hero.subtitle %></p>
                        <button class="px-3 sm:px-8 py-4 bg-rose-500 text-white rounded-xl shadow-lg hover:bg-rose-600 hover:shadow-rose-200 transition-all">
                            <%= hero.cta %>
                        </button>
                    </div>
                    <div class="relative md:w-[300px]">
                        <div class="absolute inset-0 bg-rose-100 rounded-3xl rotate-6"></div>
                        <div class="absolute inset-0 bg-rose-200 rounded-3xl rotate-3"></div>
                        <div class="relative rounded-3xl overflow-hidden shadow-[inset_0_2px_4px_rgba(0,0,0,0.1)]">
                            <img src="<%= hero.profileImage %>" alt="Profile" class="w-full">
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <section id="about" class="py-20 bg-gray-100">
        <div class="max-w-7xl mx-auto px-3 sm:px-8">
            <div class="bg-white rounded-3xl shadow-[inset_0_2px_4px_rgba(0,0,0,0.1)] p-8 sm:p-16">
                <div class="grid md:grid-cols-2 gap-16 items-center">
                    <div class="relative group">
                        <img src="<%= about.image %>" alt="About" class="rounded-3xl shadow-[inset_0_2px_4px_rgba(0,0,0,0.1)] transition-transform group-hover:scale-[1.02] duration-300">
                    </div>
                    <div class="space-y-8">
                        <h2 class="text-4xl font-bold text-gray-800"><%= about.title %></h2>
                        <p class="text-gray-600"><%= about.description %></p>
                        <div class="grid grid-cols-1 sm:grid-cols-2 gap-6">
                            <% Object.entries(about.details).forEach(([key, value]) => { %>
                            <div class="bg-gray-50 rounded-xl p-6 shadow-[inset_0_2px_4px_rgba(0,0,0,0.1)]">
                                <span class="text-rose-500 font-medium block mb-2"><%= key.charAt(0).toUpperCase() + key.slice(1) %></span>
                                <%= value %>
                            </div>
                            <% }) %>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <section id="services" class="py-20">
        <div class="max-w-7xl mx-auto px-3 sm:px-8">
            <h2 class="text-4xl font-bold text-center text-gray-800 mb-16"><%= services.title %></h2>
            <div class="grid md:grid-cols-4 gap-8">
                <% services.items.forEach(service => { %>
                <div class="group bg-white rounded-2xl p-8 shadow-[inset_0_2px_4px_rgba(0,0,0,0.1)] hover:shadow-lg transition-all">
                    <div class="h-2 w-16 bg-rose-500 rounded-full mb-6"></div>
                    <h3 class="text-xl font-bold text-gray-800 mb-4"><%= service.name %></h3>
                    <p class="text-gray-600 mb-4"><%= service.description %></p>
                    <span class="text-rose-500 font-bold"><%= service.price %></span>
                </div>
                <% }) %>
            </div>
        </div>
    </section>

    <section id="projects" class="py-20 bg-gray-100">
        <div class="max-w-7xl mx-auto px-3 sm:px-8">
            <h2 class="text-4xl font-bold text-center text-gray-800 mb-16"><%= projects.title %></h2>
            <div class="grid md:grid-cols-3 gap-8">
                <% projects.items.forEach(project => { %>
                <div class="group relative bg-white rounded-2xl p-4 shadow-[inset_0_2px_4px_rgba(0,0,0,0.1)] hover:shadow-xl transition-all">
                    <img src="<%= project.image %>" alt="<%= project.name %>" class="w-full h-[300px] object-cover rounded-xl shadow-[inset_0_2px_4px_rgba(0,0,0,0.1)]">
                    <div class="mt-4">
                        <h3 class="text-xl font-bold text-gray-800"><%= project.name %></h3>
                    </div>
                </div>
                <% }) %>
            </div>
        </div>
    </section>

    <section id="contact" class="py-20">
    <div id="popupMessage" class="fixed top-24 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg hidden transition-all duration-300 transform scale-90">
        <span id="popupText"></span>
    </div>

    <div class="max-w-3xl mx-auto px-3 sm:px-8">
        <div class="bg-white rounded-3xl shadow-md p-8 sm:p-16">
            <h2 class="text-4xl font-bold text-center text-gray-800 mb-12"><%= contact.title %></h2>
            <form id="contactForm" class="space-y-6">
                <div class="grid md:grid-cols-2 gap-6">
                    <div>
                        <input type="text" name="name" id="name" placeholder="Name" class="w-full px-6 py-4 bg-gray-50 rounded-xl border focus:outline-none focus:ring-2 focus:ring-rose-500">
                        <p class="text-red-500 text-sm mt-1 hidden" id="nameError"></p>
                    </div>
                    <div>
                        <input type="email" name="email" id="email" placeholder="Email" class="w-full px-6 py-4 bg-gray-50 rounded-xl border focus:outline-none focus:ring-2 focus:ring-rose-500">
                        <p class="text-red-500 text-sm mt-1 hidden" id="emailError"></p>
                    </div>
                </div>
                <div>
                    <input type="text" name="contactNo" id="contactNo" placeholder="Contact No" class="w-full px-6 py-4 bg-gray-50 rounded-xl border focus:outline-none focus:ring-2 focus:ring-rose-500">
                    <p class="text-red-500 text-sm mt-1 hidden" id="contactError"></p>
                </div>
                <div>
                    <textarea name="message" id="message" placeholder="Tell me about your query" class="w-full px-6 py-4 bg-gray-50 rounded-xl border focus:outline-none focus:ring-2 focus:ring-rose-500" rows="4"></textarea>
                    <p class="text-red-500 text-sm mt-1 hidden" id="messageError"></p>
                </div>
                <button type="submit" class="w-full py-4 bg-rose-500 text-white rounded-xl shadow-lg hover:bg-rose-600 transition-all">Send Message</button>
            </form>
        </div>
    </div>
</section>

    <footer class="bg-white py-8 shadow-[inset_0_2px_4px_rgba(0,0,0,0.1)]">
        <p class="text-center text-gray-600"><%= footer.copyright %></p>
    </footer>

<script>
document.addEventListener("DOMContentLoaded", function () {
    const form = document.getElementById("contactForm");
    const popupMessage = document.getElementById("popupMessage");
    const popupText = document.getElementById("popupText");
    const contactNo = document.getElementById("contactNo");
    const submitButton = form.querySelector("button[type='submit']");

    function showPopup(message, type = "success") {
        popupText.textContent = message;
        popupMessage.classList.remove("hidden", "bg-green-500", "bg-red-500", "scale-90");
        popupMessage.classList.add(type === "error" ? "bg-red-500" : "bg-green-500", "scale-100");

        setTimeout(() => {
            popupMessage.classList.add("hidden", "scale-90");
        }, 3000);
    }

    function validateForm() {
        let isValid = true;

        const name = document.getElementById("name");
        const email = document.getElementById("email");
        const message = document.getElementById("message");

        const nameError = document.getElementById("nameError");
        const emailError = document.getElementById("emailError");
        const contactError = document.getElementById("contactError");
        const messageError = document.getElementById("messageError");

        // Reset errors
        [nameError, emailError, contactError, messageError].forEach(error => error.classList.add("hidden"));

        if (name.value.trim() === "") {
            nameError.textContent = "Name is required.";
            nameError.classList.remove("hidden");
            isValid = false;
        }

        if (email.value.trim() === "") {
            emailError.textContent = "Email is required.";
            emailError.classList.remove("hidden");
            isValid = false;
        } else if (!/\S+@\S+\.\S+/.test(email.value)) {
            emailError.textContent = "Enter a valid email.";
            emailError.classList.remove("hidden");
            isValid = false;
        }

        if (contactNo.value.trim() === "") {
            contactError.textContent = "Mobile number is required.";
            contactError.classList.remove("hidden");
            isValid = false;
        } else if (!/^\d{10}$/.test(contactNo.value)) {
            contactError.textContent = "Mobile number must be exactly 10 digits.";
            contactError.classList.remove("hidden");
            isValid = false;
        }

        if (message.value.trim() === "") {
            messageError.textContent = "Message is required.";
            messageError.classList.remove("hidden");
            isValid = false;
        }

        return isValid;
    }

    form.addEventListener("submit", async function (event) {
        event.preventDefault();

        if (!validateForm()) {
            return;
        }

        submitButton.textContent = "Sending...";
        submitButton.disabled = true;

        const formData = new FormData(form);
        const jsonObject = {};
        formData.forEach((value, key) => {
            jsonObject[key] = value;
        });

        const url = "http://localhost:8000/api/v1/websites/send-email/<%= type %>/<%= _id %>";

        try {
            const response = await fetch(url, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(jsonObject),
            });

            if (response.ok) {
                showPopup("Message sent successfully!", "success");
                form.reset();
                submitButton.textContent = "Send Message";
                submitButton.disabled = false;
            } else {
                showPopup("Failed to send message. Try again.", "error");
            }
        } catch (error) {
            showPopup("Error occurred. Please try again.", "error");
        }
    });

    // Prevent users from entering more than 10 digits in the contact number field and remove extra digits automatically
    contactNo.addEventListener("input", function () {
        this.value = this.value.replace(/\D/g, "").slice(0, 10);
    });

    // Clear error message when typing
    document.querySelectorAll("input, textarea").forEach(input => {
        input.addEventListener("input", function () {
            const errorElement = this.nextElementSibling;
            if (errorElement) {
                errorElement.classList.add("hidden");
            }
        });
    });
});
</script>


</body>
</html>
